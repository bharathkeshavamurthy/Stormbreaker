Forge module
************

This script defines the necessary utilities for Project Odin–such as,
logging parameters, decorator methods, representation callees, message
validations, message parsers, etc.

Author: Bharath Keshavamurthy <bkeshava@purdue.edu>

Organization: School of Electrical & Computer Engineering, Purdue
University, West Lafayette, IN.

Copyright (c) 2021. All Rights Reserved

class Forge.Controller

   Bases: "abc.ABC"

   An abstract class for XXRealm Python Controllers

   abstract property kafka_client

      The Kafka client

      Returns: The KafkaClient associated with this XXRealm Python
      Controller

   abstract property realm

      The realm-type of this controller implementation

      Returns: The realm-type (member of RealmTypes enumeration) of
      this controller implementation

   abstract property registration_key

      The registration key of this controller implementation obtained
      post-registration from the Centralized Realms Python Controller

      Returns: The registration key of this controller implementation:
      Set via a callback from an exposed method

   abstract property serial_comm

      The serial communication interface

      Returns: The uC-XXRealm Python Controller serial communication
      interface configuration (SerialCommConfig)

   abstract property setup_handler

      The setup handler

      Returns: The SetupHandler associated with this XXRealm Python
      Controller

   abstract start() -> None

      Start the control operations at the XXRealm Python Controllers
      For example, At the TxRealm Python Controller (v21.01
      ControllerImpl): uC-based servo control trigger via serial–post
      rotation angle estimation; and

      At the RxRealm Python Controller (v21.01 ControllerImpl): uC-
      based servo control trigger via serial– post rotation angle
      estimation.

   abstract property uid

      The unique identifier of this controller implementation

      Returns: The unique string identifier of this controller
      implementation (Picks up the UID during the initial
         installation configuration of this XXRealm Python Controller
         by Docker)

exception Forge.InvalidControllerConfiguration

   Bases: "Exception"

   Invalid Controller Configuration Error

   This exception is raised when invalid configurations are received
   for the XXRealm Python Controller that is to be registered with the
   Centralized Realms Python Controller.

exception Forge.InvalidDictError

   Bases: "Exception"

   Invalid Dict Error

   This exception is raised when an invalid/unsupported Python
   dictionary is provided in order to pack it into a Python dataclass
   instance.

class Forge.KafkaClient(config: Raven.KafkaConfig)

   Bases: "object"

   A Kafka client encapsulation

   get_consumer(topic: Raven.KafkaTopics) -> kafka.consumer.group.KafkaConsumer

      Get Kafka consumer for the specified topic

      Parameters:
         **topic** – The KafkaTopics enumeration member–the consumer
         for which is to be returned

      Returns: The KafkaConsumer instance associated with the given
      topic

   get_kafka_api_impl_pair(topic: Raven.KafkaTopics) -> Raven.KafkaAPIImplPair

      Get Kafka producer/consumer API implementation pair for the
      specified topic

      Parameters:
         **topic** – The KafkaTopics enumeration member for which the
         producer-consumer pair is to be returned

      Returns: The producer-consumer pair associated with the
      specified topic

   get_producer(topic: Raven.KafkaTopics) -> kafka.producer.kafka.KafkaProducer

      Get Kafka producer for the specified topic

      Parameters:
         **topic** – The KafkaTopics enumeration member–the producer
         for which is to be returned

      Returns: The KafkaProducer instance associated with the given
      topic

   set_consumer(topic: Raven.KafkaTopics, consumer: kafka.consumer.group.KafkaConsumer) -> None

      Set Kafka consumer for the specified topic

      Parameters:
         * **topic** – The KafkaTopics enumeration member for which
           the consumer is to be set

         * **consumer** – The KafkaConsumer instance that is being
           registered with the given topic for this KafkaClient
           instance

   set_kafka_api_impl_pair(topic: Raven.KafkaTopics, producer: kafka.producer.kafka.KafkaProducer, consumer: kafka.consumer.group.KafkaConsumer) -> None

      Set Kafka producer/consumer API implementation pair for the
      specified topic

      Parameters:
         * **topic** – The KafkaTopics enumeration member for which
           the producer-consumer pair is to be set

         * **producer** – The KafkaProducer instance constituting one-
           half of the KafkaAPIImplPair

         * **consumer** – The KafkaConsumer instance constituting one-
           half of the KafkaAPIImplPair

   set_producer(topic: Raven.KafkaTopics, producer: kafka.producer.kafka.KafkaProducer) -> None

      Set Kafka producer for the specified topic

      Parameters:
         * **topic** – The KafkaTopics enumeration member for which
           the producer is to be set

         * **producer** – The KafkaProducer instance that is being
           registered with the given topic for this KafkaClient
           instance

exception Forge.KafkaClientNotRegisteredError

   Bases: "IndexError"

   Kafka Client Not-Registered Error

   This exception is raised when a connection creation request is
   placed by an unregistered KafkaClient to the
   KafkaConnectionFactory.

class Forge.KafkaConnectionFactory

   Bases: "object"

   A Singleton class to create connections (producers/consumers) for
   Kafka clients

   create_connection(registration_number: int, api: Raven.KafkaAPIs, topics: Tuple[Raven.KafkaTopics]) -> None

      Create API-specific connections for registered Kafka
      clients–with respect to the given topics

      Parameters:
         * **registration_number** – The KafkaClient’s registration
           number

         * **api** – The API implementation instance that is to be
           created for this client

         * **topics** – The tuple of KafkaTopics for which API
           implementations are to be associated w.r.t the KafkaClient
           indexed by the provided registration number

      Raises:
         * **NotImplementedError** – Method or function hasn’t been
           implemented yet

         * **KafkaClientNotRegisteredError** – This exception is
           raised when a connection creation request is placed by an
           unregistered KafkaClient to the KafkaConnectionFactory.

   de_register(registration_number: int) -> None

      De-register the Kafka client indexed by its registration number

      Parameters:
         **registration_number** – Unregister the KafkaClient using
         this argument

   deregister(client: Forge.KafkaClient) -> None

      De-register the given Kafka client

      Parameters:
         **client** – The KafkaClient that is to be unregistered from
         this connection factory

   force_register(client: Forge.KafkaClient, registration_number: int = - 1) -> int

      Use this method to force re-registration of your Kafka client

      Parameters:
         * **client** – The KafkaClient that is to be registered with
           this connection factory

         * **registration_number** – If this argument is specified,
           remove this indexed KafkaClient from the registry, and re-
           register it

      Returns: The new registration number

   static get_factory()

      Instance access method for this Singleton

      Returns: The ONE and ONLY instance of this Kafka connection
      factory

   get_registration_number(client: Forge.KafkaClient) -> int

      Get the registration number for the given KafkaClient

      Parameters:
         **client** – The KafkaClient whose registration number is to
         be returned

      Returns: The registration number of the specified Kafka client

   register(client: Forge.KafkaClient) -> int

      Register the Kafka client with this connection factory–and,
      return its registration number

      Parameters:
         **client** – The KafkaClient that is to be registered with
         this connection factory

      Returns: The client’s registration number post-registration

exception Forge.KafkaConnectionFactoryInstantiationError

   Bases: "Exception"

   Kafka Connection Factory Instantiation Error

   This exception is raised when the instantiation of the Singleton
   KafkaConnectionFactory instance FAILS.

exception Forge.KafkaConsumptionError(*args, **kwargs)

   Bases: "Exception"

   Kafka Consumption Error

   This exception is raised when something went wrong while consuming
   from the specified Kafka topic.

   DEPRECATION NOTE: This exception is no longer necessary due to a
   re-design which involves a better way to handle
      consumption errors.

exception Forge.KafkaProductionError

   Bases: "Exception"

   Kafka Production Error

   This exception is raised when something went wrong while publishing
   the given message to the specified Kafka topic.

exception Forge.KafkaUnknownConnectionError

   Bases: "Exception"

   Kafka Unknown Connection Error

   This exception is raised when production/consumption is initiated
   for a KafkaTopic without creating its associated connections in the
   KafkaConnectionFactory.

Forge.LOGGING_DATE_TIME_FORMAT = '%Y-%m-%dT%H:%M:%S'

   The rpyc.utils.server.ThreadedServer properties defined as a
   namedtuple utility

exception Forge.NMEAValidationError

   Bases: "Exception"

   NMEA Validation Error

   This exception is raised when the NMEA validation of the GPS data
   received over the serial communication interface between the uC and
   the XXRealm Python Controllers FAILS.

Forge.REALMS_PORT_ENVIRONMENT_VARIABLE = 'REALMS_PORT'

   Logging

Forge.REALMS_THREADED_SERVER_DETAILS

   Decorators

   alias of "Forge.RealmsThreadedServerDetails"

exception Forge.RealmControllerNotRegisteredError

   Bases: "Exception"

   Realm Controller Not Registered Error

   This exception is raised when accesses are made to core methods in
   an unregistered XXRealm Python Controller.

exception Forge.RealmsInstantiationError

   Bases: "Exception"

   Realms Instantiation Error

   This exception is raised when the instantiation of the Singleton
   Realms instance FAILS.

exception Forge.RealmsStartupPipelineExecutionError

   Bases: "Exception"

   Realms Startup Pipeline Execution Error

   This exception is raised when an error has occurred during the
   execution of the startup pipeline in the Centralized Realms Python
   Controller. The error could be due to the following sequenced
   reasons (note the persistence of error): a. Unsupported platform
   encountered: The Centralized Realms Python Controller can only be
   run on Linux, b. A valid, single properties file could not be found
   for either Zookeeper or the Kafka server, c. Zookeeper startup
   failed, d. Kafka server startup failed, or e. Kafka topic creation
   failed.

class Forge.SetupHandler

   Bases: "abc.ABC"

   An abstract class definition for configuration & setup handling
   w.r.t the XXRealm Python Controllers

   abstract setup(mandates) -> None

      Start the Python Controller’s setup tasks For example, At the
      TxRealm Python Controller’s setup handler (v21.01
      SetupHandlerImpl): Parse the NMEA GPS data from the uC (received
      over serial) into a GPSEvent instance, publish the JSON
      represented GPSEvent as an ODIN_GPS_EVENT <module.__name__
      (TxRealm), GPSEvent.json_repr> to the ODIN_TX_GPS_EVENTS Kafka
      topic, and  simultaneously subscribe to the ODIN_RX_GPS_EVENTS
      Kafka topic–parse the consumed JSON ODIN_GPS_EVENTs
      <module.__name__ (RxRealm), GPSEvent.json_repr> from the Rx into
      the GPSEvent dataclass for use in the TxRealm Python Controller
      (v21.01 ControllerImpl); and

      At the RxRealm Python Controller’s setup handler (v21.01
      SetupHandlerImpl): Parse the NMEA GPS data from the uC (received
      over serial) into a GPSEvent instance, publish the JSON
      represented GPSEvent as an ODIN_GPS_EVENT <module.__name__
      (RxRealm), GPSEvent.json_repr> to the ODIN_TX_GPS_EVENTS Kafka
      topic, and  simultaneously subscribe to the ODIN_RX_GPS_EVENTS
      Kafka topic–parse the consumed JSON ODIN_GPS_EVENTs
      <module.__name__ (TxRealm), GPSEvent.json_repr> from the Tx into
      the GPSEvent dataclass for use in the RxRealm Python Controller
      (v21.01 ControllerImpl).

      NOTE: The Tx in v21.01 is fixed (Mobility.IMMOBILE): So, hard-
      code the Tx position in the Tx uC control code, and post the
      positional data in the agreed-upon NMEA contract on the uC-
      TxRealm Python Controller serial interface.

      Parameters:
         **mandates** – The XXRealm Python Controller’s Kafka MOM
         mandates

Forge.TOPIC_NAME_SEPARATOR = '_'

   note here that these are set during installation via the Docker CLI

   Type:
      The environment variables (system properties) associated with
      the various modules in Project Odin

exception Forge.ThreadedServerNotConfiguredError

   Bases: "Exception"

   Threaded Server Not Configured Error

   This exception is raised when either the hostname or the port is
   not configured as environment variables (or system properties) on
   the Centralized Realms Python Controller’s platform.

Forge.accepts(*types)

   A decorator for function arg type checking

   Parameters:
      ***types** – The supported data types that are to be verified
      against the arguments provided to a method that is decorated
      with this routine.

   Returns: check_accepts assertion

Forge.comm_fetch_publish(*args, **kwargs) -> None

   A utility method to fetch Comm data and publish it to the
   associated Kafka topic

   Parameters:
      * ***args** – Non-keyword arguments

      * ****kwargs** – Keyword arguments

   Raises:
      **NotImplementedError** – Method or function hasn’t been
      implemented yet.

Forge.comm_subscribe(*args, **kwargs) -> None

   A utility method to subscribe to the Kafka topic associated with
   Comm data in Project Odin

   Parameters:
      * ***args** – Non-keyword arguments

      * ****kwargs** – Keyword arguments

   Raises:
      **NotImplementedError** – Method or function hasn’t been
      implemented yet.

Forge.connect(funcs)

   A pipeline creation method

   Parameters:
      **funcs** – The routines to be pipelined in the order in which
      they are provided

   Returns: A wrapper method that encapsulates the provided routines
   (in the order in which they are provided) in a
      a data/functional pipeline

Forge.ctrl_fetch_publish(*args, **kwargs) -> None

   A utility method to fetch Control data and publish it to the
   associated Kafka topic

   Parameters:
      * ***args** – Non-keyword arguments

      * ****kwargs** – Keyword arguments

   Raises:
      **NotImplementedError** – Method or function hasn’t been
      implemented yet.

Forge.ctrl_subscribe(*args, **kwargs) -> None

   A utility method to subscribe to the Kafka topic associated with
   Control data in Project Odin

   Parameters:
      * ***args** – Non-keyword arguments

      * ****kwargs** – Keyword arguments

   Raises:
      **NotImplementedError** – Method or function hasn’t been
      implemented yet.

Forge.deprecated(func)

   This is a decorator which can be used to mark functions as
   deprecated

   Parameters:
      **func** – The method (decorated with @deprecated) against which
      this deprecation check is made

   Returns: Warnings for deprecation outlined in new_func

Forge.get_basic_logging() -> Dict[str, Any]

   Get the basic logging configurations for all the components in
   Project Odin

   Returns: A Python dictionary encapsulating the basic, common
   configurations employed for logging in almost every
      major component in Project Odin

Forge.get_file_name(kafka_api: Raven.KafkaAPIs, seq_number: int) -> str

   Get the event log file name in accordance with the Kafka API
   reference and the specified event sequence number

   Parameters:
      * **kafka_api** – The KafkaAPIs enumeration member for which the
        event log file name is to be returned

      * **seq_number** – The event sequence number that is
        incorporated into the log file’s name

   Returns: The event log file name w.r.t the Kafka API reference and
   the specified event sequence number

Forge.gps_fetch_publish(mobility: Raven.Mobility, serial_comm: Raven.SerialCommConfig, kafka_client: Forge.KafkaClient, kafka_topic: Raven.KafkaTopics, gps_event: Raven.GPSEvent, logger: logging.Logger, lock: _thread.allocate_lock) -> None

   A utility method to connect to the uC’s Serial port, extract the
   NMEA GPS data, process it into a GPSEvent, and publish it to the
   Apache Kafka Message Oriented Middleware (MOM) framework on the
   specified topic.

   DESIGN_NOTE: Although a lot of the checks in this method may seem
   gratuitous, they are necessary because this is a utility method and
   external calls to this method may be totally wild and non-
   conforming as Project Odin scales.

   Parameters:
      * **mobility** – The Mobility enumeration member in order to
        determine if we need indefinite GPSEvent publishes

      * **serial_comm** – The uC-XXRealm Python Controller serial
        communication interface configuration

      * **kafka_client** – The KafkaClient instance whose
        KafkaProducer is used for the required publishes

      * **kafka_topic** – The KafkaTopics enumeration member to which
        the KafkaProducer publishes processed GPS data

      * **gps_event** – The GPSEvent dataclass instance of the caller
        that is to be populated in an indefinite thread

      * **logger** – The logger instance passed down by the caller for
        logging and module identification

      * **lock** – The threading.Lock object to avoid resource access
        problems/race conditions

   Raises:
      * **SerialException** – Base class for serial port related
        exceptions

      * **KafkaClientNotRegisteredError** – This exception is raised
        when a connection creation request is placed by an
        unregistered KafkaClient to the KafkaConnectionFactory.

      * **KafkaUnknownConnectionError** – This exception is raised
        when production/consumption is initiated for a KafkaTopic
        without creating its associated connections in the
        KafkaConnectionFactory.

      * **NMEAValidationError** – This exception is raised when the
        NMEA validation of the GPS data received over the serial
        communication interface between the uC and the XXRealmPython
        Controllers FAILS.

      * **KafkaProductionError** – This exception is raised when
        something went wrong while publishing the given message to
        the specified Kafka topic.

      * **Exception** – Common base class for all non-exit exceptions.

Forge.gps_subscribe(kafka_client: Forge.KafkaClient, kafka_topic: Raven.KafkaTopics, gps_event: Raven.GPSEvent, allowed_publishers: Tuple[str], logger: logging.Logger, lock: _thread.allocate_lock) -> None

   A utility method to subscribe to the specified Kafka topic

   DESIGN_NOTE: Although a lot of the checks in this method may seem
   gratuitous, they are necessary because this is a utility method and
   external calls to this method may be totally wild and non-
   conforming as Project Odin scales.

   Parameters:
      * **kafka_client** – The KafkaClient instance whose
        KafkaConsumer is used for the required subscriptions

      * **kafka_topic** – The KafkaTopics enumeration member that is
        to be subscribed to by the KafkaClient’s KafkaConsumer

      * **gps_event** – The GPSEvent dataclass instance of the caller
        that is to be populated in an indefinite thread

      * **allowed_publishers** – The filter which allows the
        KafkaConsumer on the provided KafkaTopics enumeration member
        to process only those messages whose keys match the publisher
        identifiers registered with the centralized Scheduler

      * **logger** – The logger instance passed down by the caller for
        module identification

      * **lock** – The threading.Lock object to avoid resource access
        problems/race conditions

   Raises:
      * **KafkaClientNotRegisteredError** – This exception is raised
        when a connection creation request is placed by an
        unregistered KafkaClient to the KafkaConnectionFactory.

      * **KafkaUnknownConnectionError** – This exception is raised
        when production/consumption is initiated for a KafkaTopic
        without creating its associated connections in the
        KafkaConnectionFactory.

      * **Exception** – Common base class for all non-exit exceptions

Forge.json_repr(dataclass_obj: dataclasses.dataclass, kafka_api: Raven.KafkaAPIs, seq_number: int) -> str

   A utility method to save the JSON GPSEvent to a file (for logging)
   AND return the JSON-formatted string for the Kafka publish routine

   Parameters:
      * **dataclass_obj** – The dataclass instance which is to be
        represented as a JSON string

      * **kafka_api** – The KafkaAPI reference for event-specific log
        file name determination

      * **seq_number** – The sequence number of event that is to be
        logged and represented as a JSON string

   Returns: JSON representation of the provided dataclass instance

Forge.nmea_parse(nmea_data: str, gps_event: Raven.GPSEvent) -> None

   A utility method to parse NMEA data

   Parameters:
      * **nmea_data** – The NMEA GPS string that is to be checked
        against the available GPSEvent dataclass instance

      * **gps_event** – The available GPSEvent dataclass instance that
        is to be modified with the updates from the NMEA GPS string
        from the GPS receiver over the uC-XXRealm Python Controller
        serial communication interface

Forge.nmea_validate(nmea_data: str) -> bool

   A utility method to validate NMEA data

   Parameters:
      **nmea_data** – The NMEA GPS data string from the uC that is to
      be validated

   Returns: True/False validation status

Forge.pack_dict_into_dataclass(dict_: dict, dataclass_: dataclasses.dataclass) -> dataclasses.dataclass

   Pack the data from a Python dictionary into a dataclass instance

   Parameters:
      * **dict** – The dictionary to be packed into a dataclass
        instance

      * **dataclass** – The dataclass whose instance is to be returned
        post-dictionary-packing

   Returns: An instance of the provided dataclass reference packed
   with fields and values from the provided dictionary

   Raises: InvalidDictError
      This exception is raised when an invalid/unsupported Python
      dictionary is provided in order to pack it into a Python
      dataclass instance.
