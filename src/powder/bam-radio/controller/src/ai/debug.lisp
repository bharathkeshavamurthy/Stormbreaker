;; place for debug stuff

(in-package :bam-radio)

;; a common random state, if needed
#+ecl
(defvar +debug-random-state+
  #$#A(EXT:BYTE64 (313) (6958273416495772730 5624183467925713925 5298603522197332146 1257785478047644589 17903217263766459525 17038103447189763166 6959848678116432234 4760804987547975504 16666816872631263931 13211421627729344058 10440492059856996626 16718231275438137374 2631656631799109841 3649249905562503744 225559417975012828 5785156712758000946 10003332255393892375 6826895718161142424 11427712944308789897 16222870703798651277 17174432201787683711 1936472307220477424 10659344626245775792 1532445082838031744 9214513293347840622 13144305974112697242 5037198250843514341 11441441581701650077 13882093088156791180 8457258014879508190 7854096337151948563 16218290891691927326 16117591190577950040 15274982595746213669 4998493317012273998 6305752632391081140 15336873037286793677 13018245760043645287 6747999706227417457 16542077693074954081 12607492757527457876 2639463425070485418 11220757333392933865 7219344092593394419 18035491504998106799 11777939674585735930 12556714622950123695 13148858935132149439 16685736493640809076 4347382682048395308 1102201046726349444 17398973466522725319 13964580782471148599 10397350814325959101 3933035199038655794 12313896358147543363 5077405510332808240 6867679211620327739 5341585538846972499 3266830911250208513 15307727106213445687 14930530980046124918 4000946492229216421 8710567873006568081 11807363066185873989 18191582013490829319 1068719442008822368 303992059573315872 9303317153160162464 4354515887166205497 16995808427784590467 5433236959459215292 10455770061832997893 4244758790866327967 8648224988807303654 14501750919510199153 5647329361263687772 191581610114436455 8511862259061429488 6658230369015240023 3559706619847464902 11262102474925529343 14872430299972557134 10783866353368593692 10010294080774208566 2485323884885073455 13077191938862838375 15622016578970749563 15498026208781307355 10245673279123710646 14803660090033812348 12171926721524486072 9808804714344809330 7751703737488403732 13310530199475766547 7079733449799387530 12491989861838763338 6431812268924345985 14260431220797591183 8563718892393390715 16771288024396435561 2749531890422088880 9300898909643000435 4192593983805102466 7367933555928348401 4846998801254746018 8584020553087215307 478243573116280369 15084765427544181756 5654261647307274731 17077055933324844892 15579674756165069774 8959194837170398217 10703853495549590144 5519457418946559603 14825767962228466064 2680571133337843659 9188181766342924228 1662089476725579685 5399017836061794796 5435941061348071069 4531988275042627470 8759041593789931612 17320085589694168867 4373920098473510887 9339724103708819636 1449787772381227494 18437167168950316565 15727348367229672044 5150710751419947594 18193873600088566861 11286249332522233070 11344669977378147408 13662692422052101417 7229619332953158621 2851086993313175181 2396608251984272635 3125478170605372577 5066170871468626477 16098107094084542688 4808206678222650808 9878078632343520024 16869645435040398281 5664186341149820141 1854751847542286083 17732580896437779392 12594550351838631385 14333032021140081213 6236049350750349583 11748392140386421837 14220952564262571623 9309042145001761061 10847696265227594434 16331139037651091966 9655241173685815017 13869105514793097029 8825876424333264066 5580680467785488354 16930577641247855025 8218486269251140914 6663738202394641967 6834621566559803929 8100858767164998164 10558961014962352258 7717998971533743843 15028537607179021945 12312976002303625635 8942622430697871344 8969747157253163048 4308410702110984538 11945835420891764178 17263329594844297820 15086681676561833836 6629730445386282862 12595009274120950949 8823890499768273358 17434399688311532462 875632528514562534 4176787964297601646 7975548828904228952 15623746260327711957 10243240192884601951 17712463483984313584 17347256247257741640 7462972605727931304 14466287383500903115 2553635562373361534 8235468999915200746 10575781943350100921 4894902936140130894 4816553184992328606 6844788704338577476 11675700958037908633 8133219989125927526 328804172735522972 16517256947932136810 15389342056666223087 11903311885096002715 14836007923372020982 12471841235408992602 11821599320419799751 13769454170301680727 4654022449319868903 14967813334211883577 6021116406800025193 13911718006803224267 10612376369684157616 14469119625747338886 4121866201068005750 7136645868390095072 12630767791486181590 1150408985918771683 5699929402822939878 6656791581473257778 4185595785626446649 7406361516600709690 13785244046678962434 14220918658859943624 15124843781188432204 6394225772990055167 2285116416021956200 14997300949260535780 2960166094425400717 15705548167081777227 1520526214017460227 2071724646389428810 5779335454252941506 16937609713705410757 9848130337856856924 8098711832509244276 5243245905403650495 9920319036904090781 4320774179807113192 6408045797064145697 684032737471797111 15695662033381284729 16281904764600018539 16386557779512366951 13347924130625256893 469380455666100016 2180984178386528454 1069355372824161009 15363981017591143972 16065906189437013818 17544393802750715557 4629347248497581371 15437440938949519578 3640421174675808273 1180133359659324199 11062666779247791537 12257244423056474979 6993499253043264420 10102241470023749985 4964166516150890383 12741895021204758070 17566202056545078281 4055763510324126994 5891591150084229096 16734254968336627662 7437704780810241804 9760255413152006077 8575220431620624166 1308327727465340080 6511164780599710663 2431112148134604794 18260074808671081500 17010527421533049918 14457690628769740046 15829210191020365222 3095900074177326338 11010952740020205747 12904680461657731840 683602821135172772 2832313425690807067 16588978359467914179 16775574362322346822 10190190658805073488 1476879527873534033 10091894820874767652 295592703900928952 11780987984760493464 9185467605835033587 868244899256587100 17241793544980445013 2372163539113700478 7379974822815805156 11387132145187782564 10880200707463232363 2673776395857119304 11350056924673568711 6380181083221546531 4442642642068432565 1114730089517162234 9075168003176652338 17633622026732114606 12718962551562235267 4444219851717182941 605694995970006557 13330989264881060636 11223771553877073012 14855350093532098201 15447726083672885774 10533674183898080957 4726592908056803094 1366013320548178553 12658374454764018202 8350021810540757354 7113832533286670781 10211225192966216396 9194715717881887920 6185565845767230665 14924013081020616024 16)))

#+sbcl
(defvar +debug-random-state+ nil) ;; FIXME

(defvar *rethrow-condition* nil
  "if T, don't just handle conditions. -- use for debug")

(defun debugger ()
  "Start the debugger."
  (break))

(defun say-hello ()
  "Print something using our logging infrastructure."
  (log-string "Hello from LISP!"))

(defun serialize-to-byte-vector (obj)
  "Serialize an arbitrary object to a byte vector."
  (flexi-streams:with-output-to-sequence (ovec :as-list nil)
    (cl-store:store obj ovec)))

(defun from-byte-vector (vec)
  "Load an object from a byte vector."
  (flexi-streams:with-input-from-sequence (ivec vec)
    (cl-store:restore ivec)))

(defvar +debug-bandwidth-table+
  (let ((sample-rate (floor 46.08e6))
        (oversample-factors '(320 160 96 64 48 40 32 24 16 8 4))
        (ht (make-hash-table))
        (i 0))
    (loop for os in oversample-factors do
         (setf (gethash i ht) (/ sample-rate os))
         (incf i))
    ht)
  "Bandwidth table as of <2019-08-13 Tue>.")

(defvar +debug-channelization-table+
  (let ((ht (make-hash-table)))
    (setf (gethash 5000000 ht)
          '(1 . #(-1656000 -1288000 -920000 -552000 -184000 184000 552000 920000
                  1288000 1656000)))
    (setf (gethash 8000000 ht)
          '(1 . #(-3105882 -2717647 -2329412 -1941176 -1552941 -1164706 -776471
                  -388235 0 388235 776471 1164706 1552941 1941176 2329412 2717647
                  3105882)))
    (setf (gethash 10000000 ht)
          '(3 . #(-3870000 -3010000 -2150000 -1290000 -430000 430000 1290000
                  2150000 3010000 3870000)))
    (setf (gethash 20000000 ht)
          '(3 . #(-8895652 -8086957 -7278261 -6469565 -5660870 -4852174
                  -4043478 -3234783 -2426087 -1617391 -808696  0
                  808696   1617391  2426087  3234783  4043478  4852174
                  5660870  6469565  7278261  8086957  8895652)))
    (setf (gethash 25000000 ht)
          '(4 . #(-11263636 -10190909 -9118182 -8045455 -6972727 -5900000
                  -4827273  -3754545  -2681818 -1609091 -536364  536364
                  1609091   2681818   3754545  4827273  5900000  6972727
                  8045455   9118182   10190909 11263636)))
    (setf (gethash 40000000 ht)
          '(4 . #(-18778378 -17735135 -16691892 -15648649 -14605405 -13562162
                  -12518919 -11475676 -10432432 -9389189  -8345946  -7302703
                  -6259459  -5216216  -4172973  -3129730  -2086486  -1043243
                  0         1043243   2086486   3129730   4172973   5216216
                  6259459   7302703   8345946   9389189   10432432  11475676
                  12518919  13562162  14605405  15648649  16691892  17735135
                  18778378)))
    ht)
  "Channelizaiton table as of <2019-08-13 Tue>")

;; Random code

(defun sortperm (seq tst)
  "Get a sorted sequence and the permutation sorting it."
  (let* ((zipped (mapcar #'list seq (alexandria:iota (length seq))))
         (sorted (stable-sort zipped #'(lambda (a b) (funcall tst (car a) (car b)))))
         (outidx)
         (newseq (mapcar #'(lambda (x) (push (cadr x) outidx) (car x)) sorted)))
    (values newseq (nreverse outidx))))

(defun print-hash-table (ht &optional stream)
  "Print the elements of a hash table"
  (format (or stream t) "#HASH{~{~{(~a : ~a)~}~^ ~}}"
          (loop for key being the hash-keys of ht
             using (hash-value value)
             collect (list key value))))

(defun print-nested-hash-table (ht &optional stream)
  (let ((out ""))
    (labels ((recadd (ht level)
               (let ((indent1 (make-string (* 2 level)))
                     (indent2 (make-string (* 2 (1+ level)))))
                 (setf out (concatenate 'string out "{~%"))
                 (maphash #'(lambda (key val)
                              (setf out (concatenate 'string out indent2 (prin1-to-string key) ": "))
                              (if (equal (type-of val) 'hash-table)
                                  (recadd val (1+ level))
                                  (setf out (concatenate 'string out (prin1-to-string val) "~%"))))
                          ht)
                 (setf out (concatenate 'string out indent1 "}~%")))))
      (when ht (recadd ht 0)))
    (format (or stream t) (concatenate 'string out "~%"))))

;; testing multithreading
#-sbcl
(defun print-processes ()
  (format t "All processes:~A~%" (mp:all-processes)))

#-sbcl
(defun do-something-multithread ()
  "Spawn some work on new threads."
  (print-processes)
  (flet ((say-hello (id)
           (log-string (format nil "Hello, world! Doing some work on thread ~a" id))
           (sleep 5)
           (log-string (format nil "Done on thread ~a" id))
           (mp:exit-process)))
    (loop for id from 0 to 20 do
         (mp:process-run-function (format nil "hello~a" id)
                                  #'(lambda () (say-hello id))))))
