syntax = "proto3";

package BAMDebugPb;

message FloatComplex {
  float re = 1;
  float im = 2;
}

/// a proto definition of for the OFDMSymbolParams struct (see src.ofdm.h) to
/// retrieve information for external debugging tools (python, matlab,
/// etc). With some extra care, this might be useful for other things as well.
message OFDMSymbolParams {
  int64 symbol_length = 1;
  int64 oversample_rate = 2;
  int64 cyclic_prefix_length = 3;
  int64 postfix_pad = 4;

  int64 num_tx_samples = 5;
  int64 num_data_carriers = 6;
  int64 num_bits = 7;
  int64 num_pilot_carriers = 8;

  repeated int64 data_carrier_mapping = 9;
  repeated int64 pilot_carrier_mapping = 10;
  repeated FloatComplex pilot_symbols = 11;
  repeated FloatComplex prefix = 12;

  // FIXME: currently not supporting the constellation
}

///  proto def for the DFTSOFDMFrameParams struct
message DFTSOFDMFrameParams {
  repeated OFDMSymbolParams symbols = 1;

  int64 num_symbols = 2;
  int64 num_tx_samples = 3;
  int64 num_bits = 4;
  int64 dft_spread_length = 5;
}

// bootstrap protocol

/// server to client messages
message BSStoCStart {
  int32 your_id = 1;
  int32 your_control_id = 2;
  repeated int32 all_control_ids = 3;
}

message BSStoCStop {
  int32 your_id = 1;
}

message BSStoCAck {
  int32 your_id = 1;
}

message BSStoC {
  oneof payload {
    BSStoCStart start = 1;
    BSStoCStop stop = 2;
    BSStoCAck ack = 3;
  }
}

/// client to server messages
message BSCtoSReg {
  string my_ip = 2;
}

message BSCtoSReady {
  int32 my_id = 2;
}

message BSCtoSReport {
  int32 my_id = 1;
  int64 synch_time = 2;
}

message BSCtoS {
  oneof payload {
    BSCtoSReg register = 1;
    BSCtoSReport report = 2;
    BSCtoSReady ready = 3;
 }
}
