/*
 * IEEE802_codes.cpp
 * LDPC Code definitions implementation
 *
 * Copyright (c) 2017 Dennis Ogbe <dogbe@purdue.edu>
 *
 */

#include "yaldpc.hpp"

#include <fstream>
#include <iostream>
#include <stdexcept>

namespace yaldpc {
namespace ieee80211 {

/*
 * Matrix definitions
 */

/*
 * Block size 648, rate 1/2
 */
const std::vector<int64_t> B648_R12 = {
    0,  -1, -1, -1, 0,  0,  -1, -1, 0,  -1, -1, 0,  1,  0,  -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, 22, 0,  -1, -1, 17, -1, 0,  0,  12, -1, -1, -1,
    -1, 0,  0,  -1, -1, -1, -1, -1, -1, -1, -1, -1, 6,  -1, 0,  -1, 10, -1,
    -1, -1, 24, -1, 0,  -1, -1, -1, 0,  0,  -1, -1, -1, -1, -1, -1, -1, -1,
    2,  -1, -1, 0,  20, -1, -1, -1, 25, 0,  -1, -1, -1, -1, -1, 0,  0,  -1,
    -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 3,  -1, -1, -1, 0,  -1, 9,  11,
    -1, -1, -1, -1, 0,  0,  -1, -1, -1, -1, -1, -1, 24, -1, 23, 1,  17, -1,
    3,  -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, 0,  0,  -1, -1, -1, -1, -1,
    25, -1, -1, -1, 8,  -1, -1, -1, 7,  18, -1, -1, 0,  -1, -1, -1, -1, -1,
    0,  0,  -1, -1, -1, -1, 13, 24, -1, -1, 0,  -1, 8,  -1, 6,  -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, 0,  0,  -1, -1, -1, 7,  20, -1, 16, 22, 10,
    -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,  0,  -1, -1,
    11, -1, -1, -1, 19, -1, -1, -1, 13, -1, 3,  17, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, 0,  0,  -1, 25, -1, 8,  -1, 23, 18, -1, 14, 9,  -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,  0,  3,  -1, -1, -1, 16, -1,
    -1, 2,  25, 5,  -1, -1, 1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0};
/*
 * Block size 648, rate 2/3
 */
const std::vector<int64_t> B648_R23 = {
    25, 26, 14, -1, 20, -1, 2,  -1, 4,  -1, -1, 8,  -1, 16, -1, 18, 1,  0,
    -1, -1, -1, -1, -1, -1, 10, 9,  15, 11, -1, 0,  -1, 1,  -1, -1, 18, -1,
    8,  -1, 10, -1, -1, 0,  0,  -1, -1, -1, -1, -1, 16, 2,  20, 26, 21, -1,
    6,  -1, 1,  26, -1, 7,  -1, -1, -1, -1, -1, -1, 0,  0,  -1, -1, -1, -1,
    10, 13, 5,  0,  -1, 3,  -1, 7,  -1, -1, 26, -1, -1, 13, -1, 16, -1, -1,
    -1, 0,  0,  -1, -1, -1, 23, 14, 24, -1, 12, -1, 19, -1, 17, -1, -1, -1,
    20, -1, 21, -1, 0,  -1, -1, -1, 0,  0,  -1, -1, 6,  22, 9,  20, -1, 25,
    -1, 17, -1, 8,  -1, 14, -1, 18, -1, -1, -1, -1, -1, -1, -1, 0,  0,  -1,
    14, 23, 21, 11, 20, -1, 24, -1, 18, -1, 19, -1, -1, -1, -1, 22, -1, -1,
    -1, -1, -1, -1, 0,  0,  17, 11, 11, 20, -1, 21, -1, 26, -1, 3,  -1, -1,
    18, -1, 26, -1, 1,  -1, -1, -1, -1, -1, -1, 0};
/*
 * Block size 648, rate 3/4
 */
const std::vector<int64_t> B648_R34 = {
    16, 17, 22, 24, 9,  3,  14, -1, 4,  2,  7,  -1, 26, -1, 2,  -1, 21, -1,
    1,  0,  -1, -1, -1, -1, 25, 12, 12, 3,  3,  26, 6,  21, -1, 15, 22, -1,
    15, -1, 4,  -1, -1, 16, -1, 0,  0,  -1, -1, -1, 25, 18, 26, 16, 22, 23,
    9,  -1, 0,  -1, 4,  -1, 4,  -1, 8,  23, 11, -1, -1, -1, 0,  0,  -1, -1,
    9,  7,  0,  1,  17, -1, -1, 7,  3,  -1, 3,  23, -1, 16, -1, -1, 21, -1,
    0,  -1, -1, 0,  0,  -1, 24, 5,  26, 7,  1,  -1, -1, 15, 24, 15, -1, 8,
    -1, 13, -1, 13, -1, 11, -1, -1, -1, -1, 0,  0,  2,  2,  19, 14, 24, 1,
    15, 19, -1, 21, -1, 2,  -1, 24, -1, 3,  -1, 2,  1,  -1, -1, -1, -1, 0};
/*
 * Block size 648, rate 5/6
 */
const std::vector<int64_t> B648_R56 = {
    17, 13, 8,  21, 9,  3,  18, 12, 10, 0,  4,  15, 19, 2,  5,  10,
    26, 19, 13, 13, 1,  0,  -1, -1, 3,  12, 11, 14, 11, 25, 5,  18,
    0,  9,  2,  26, 26, 10, 24, 7,  14, 20, 4,  2,  -1, 0,  0,  -1,
    22, 16, 4,  3,  10, 21, 12, 5,  21, 14, 19, 5,  -1, 8,  5,  18,
    11, 5,  5,  15, 0,  -1, 0,  0,  7,  7,  14, 14, 4,  16, 16, 24,
    24, 10, 1,  7,  15, 6,  10, 26, 8,  18, 21, 14, 1,  -1, -1, 0};

/*
 * Block size 1296, rate 1/2
 */
const std::vector<int64_t> B1296_R12 = {
    40, -1, -1, -1, 22, -1, 49, 23, 43, -1, -1, -1, 1,  0,  -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, 50, 1,  -1, -1, 48, 35, -1, -1, 13, -1, 30, -1,
    -1, 0,  0,  -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, 50, -1, -1, 4,  -1,
    2,  -1, -1, -1, -1, 49, -1, -1, 0,  0,  -1, -1, -1, -1, -1, -1, -1, -1,
    33, -1, -1, 38, 37, -1, -1, 4,  1,  -1, -1, -1, -1, -1, -1, 0,  0,  -1,
    -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, 0,  22, -1, -1, 20, 42, -1, -1,
    -1, -1, -1, -1, 0,  0,  -1, -1, -1, -1, -1, -1, 51, -1, -1, 48, 35, -1,
    -1, -1, 44, -1, 18, -1, -1, -1, -1, -1, -1, 0,  0,  -1, -1, -1, -1, -1,
    47, 11, -1, -1, -1, 17, -1, -1, 51, -1, -1, -1, 0,  -1, -1, -1, -1, -1,
    0,  0,  -1, -1, -1, -1, 5,  -1, 25, -1, 6,  -1, 45, -1, 13, 40, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, 0,  0,  -1, -1, -1, 33, -1, -1, 34, 24, -1,
    -1, -1, 23, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 0,  0,  -1, -1,
    1,  -1, 27, -1, 1,  -1, -1, -1, 38, -1, 44, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, 0,  0,  -1, -1, 18, -1, -1, 23, -1, -1, 8,  0,  35, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,  0,  49, -1, 17, -1, 30, -1,
    -1, -1, 34, -1, -1, 19, 1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0};
/*
 * Block size 1296, rate 2/3
 */
const std::vector<int64_t> B1296_R23 = {
    39, 31, 22, 43, -1, 40, 4,  -1, 11, -1, -1, 50, -1, -1, -1, 6,  1,  0,
    -1, -1, -1, -1, -1, -1, 25, 52, 41, 2,  6,  -1, 14, -1, 34, -1, -1, -1,
    24, -1, 37, -1, -1, 0,  0,  -1, -1, -1, -1, -1, 43, 31, 29, 0,  21, -1,
    28, -1, -1, 2,  -1, -1, 7,  -1, 17, -1, -1, -1, 0,  0,  -1, -1, -1, -1,
    20, 33, 48, -1, 4,  13, -1, 26, -1, -1, 22, -1, -1, 46, 42, -1, -1, -1,
    -1, 0,  0,  -1, -1, -1, 45, 7,  18, 51, 12, 25, -1, -1, -1, 50, -1, -1,
    5,  -1, -1, -1, 0,  -1, -1, -1, 0,  0,  -1, -1, 35, 40, 32, 16, 5,  -1,
    -1, 18, -1, -1, 43, 51, -1, 32, -1, -1, -1, -1, -1, -1, -1, 0,  0,  -1,
    9,  24, 13, 22, 28, -1, -1, 37, -1, -1, 25, -1, -1, 52, -1, 13, -1, -1,
    -1, -1, -1, -1, 0,  0,  32, 22, 4,  21, 16, -1, -1, -1, 27, 28, -1, 38,
    -1, -1, -1, 8,  1,  -1, -1, -1, -1, -1, -1, 0};
/*
 * Block size 1296, rate 3/4
 */
const std::vector<int64_t> B1296_R34 = {
    39, 40, 51, 41, 3,  29, 8,  36, -1, 14, -1, 6,  -1, 33, -1, 11, -1, 4,
    1,  0,  -1, -1, -1, -1, 48, 21, 47, 9,  48, 35, 51, -1, 38, -1, 28, -1,
    34, -1, 50, -1, 50, -1, -1, 0,  0,  -1, -1, -1, 30, 39, 28, 42, 50, 39,
    5,  17, -1, 6,  -1, 18, -1, 20, -1, 15, -1, 40, -1, -1, 0,  0,  -1, -1,
    29, 0,  1,  43, 36, 30, 47, -1, 49, -1, 47, -1, 3,  -1, 35, -1, 34, -1,
    0,  -1, -1, 0,  0,  -1, 1,  32, 11, 23, 10, 44, 12, 7,  -1, 48, -1, 4,
    -1, 9,  -1, 17, -1, 16, -1, -1, -1, -1, 0,  0,  13, 7,  15, 47, 23, 16,
    47, -1, 43, -1, 29, -1, 52, -1, 2,  -1, 53, -1, 1,  -1, -1, -1, -1, 0};
/*
 * Block size 1296, rate 5/6
 */
const std::vector<int64_t> B1296_R56 = {
    48, 29, 37, 52, 2,  16, 6,  14, 53, 31, 34, 5,  18, 42, 53, 31,
    45, -1, 46, 52, 1,  0,  -1, -1, 17, 4,  30, 7,  43, 11, 24, 6,
    14, 21, 6,  39, 17, 40, 47, 7,  15, 41, 19, -1, -1, 0,  0,  -1,
    7,  2,  51, 31, 46, 23, 16, 11, 53, 40, 10, 7,  46, 53, 33, 35,
    -1, 25, 35, 38, 0,  -1, 0,  0,  19, 48, 41, 1,  10, 7,  36, 47,
    5,  29, 52, 52, 31, 10, 26, 6,  3,  2,  -1, 51, 1,  -1, -1, 0};

/*
 *Block size 1944, rate 1/2
 */
const std::vector<int64_t> B1944_R12 = {
    57, -1, -1, -1, 50, -1, 11, -1, 50, -1, 79, -1, 1,  0,  -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, 3,  -1, 28, -1, 0,  -1, -1, -1, 55, 7,  -1, -1,
    -1, 0,  0,  -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, 24, 37,
    -1, -1, 56, 14, -1, -1, -1, -1, 0,  0,  -1, -1, -1, -1, -1, -1, -1, -1,
    62, 53, -1, -1, 53, -1, -1, 3,  35, -1, -1, -1, -1, -1, -1, 0,  0,  -1,
    -1, -1, -1, -1, -1, -1, 40, -1, -1, 20, 66, -1, -1, 22, 28, -1, -1, -1,
    -1, -1, -1, -1, 0,  0,  -1, -1, -1, -1, -1, -1, 0,  -1, -1, -1, 8,  -1,
    42, -1, 50, -1, -1, 8,  -1, -1, -1, -1, -1, 0,  0,  -1, -1, -1, -1, -1,
    69, 79, 79, -1, -1, -1, 56, -1, 52, -1, -1, -1, 0,  -1, -1, -1, -1, -1,
    0,  0,  -1, -1, -1, -1, 65, -1, -1, -1, 38, 57, -1, -1, 72, -1, 27, -1,
    -1, -1, -1, -1, -1, -1, -1, 0,  0,  -1, -1, -1, 64, -1, -1, -1, 14, 52,
    -1, -1, 30, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, 0,  0,  -1, -1,
    -1, 45, -1, 70, 0,  -1, -1, -1, 77, 9,  -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, 0,  0,  -1, 2,  56, -1, 57, 35, -1, -1, -1, -1, -1, 12, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,  0,  24, -1, 61, -1, 60, -1,
    -1, 27, 51, -1, -1, 16, 1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0};
/*
 * Block size 1944, rate 2/3
 */
const std::vector<int64_t> B1944_R23 = {
    61, 75, 4,  63, 56, -1, -1, -1, -1, -1, -1, 8,  -1, 2,  17, 25, 1,  0,
    -1, -1, -1, -1, -1, -1, 56, 74, 77, 20, -1, -1, -1, 64, 24, 4,  67, -1,
    7,  -1, -1, -1, -1, 0,  0,  -1, -1, -1, -1, -1, 28, 21, 68, 10, 7,  14,
    65, -1, -1, -1, 23, -1, -1, -1, 75, -1, -1, -1, 0,  0,  -1, -1, -1, -1,
    48, 38, 43, 78, 76, -1, -1, -1, -1, 5,  36, -1, 15, 72, -1, -1, -1, -1,
    -1, 0,  0,  -1, -1, -1, 40, 2,  53, 25, -1, 52, 62, -1, 20, -1, -1, 44,
    -1, -1, -1, -1, 0,  -1, -1, -1, 0,  0,  -1, -1, 69, 23, 64, 10, 22, -1,
    21, -1, -1, -1, -1, -1, 68, 23, 29, -1, -1, -1, -1, -1, -1, 0,  0,  -1,
    12, 0,  68, 20, 55, 61, -1, 40, -1, -1, -1, 52, -1, -1, -1, 44, -1, -1,
    -1, -1, -1, -1, 0,  0,  58, 8,  34, 64, 78, -1, -1, 11, 78, 24, -1, -1,
    -1, -1, -1, 58, 1,  -1, -1, -1, -1, -1, -1, 0};
/*
 * Block size 1944, rate 3/4
 */
const std::vector<int64_t> B1944_R34 = {
    48, 29, 28, 39, 9,  61, -1, -1, -1, 63, 45, 80, -1, -1, -1, 37, 32, 22,
    1,  0,  -1, -1, -1, -1, 4,  49, 42, 48, 11, 30, -1, -1, -1, 49, 17, 41,
    37, 15, -1, 54, -1, -1, -1, 0,  0,  -1, -1, -1, 35, 76, 78, 51, 37, 35,
    21, -1, 17, 64, -1, -1, -1, 59, 7,  -1, -1, 32, -1, -1, 0,  0,  -1, -1,
    9,  65, 44, 9,  54, 56, 73, 34, 42, -1, -1, -1, 35, -1, -1, -1, 46, 39,
    0,  -1, -1, 0,  0,  -1, 3,  62, 7,  80, 68, 26, -1, 80, 55, -1, 36, -1,
    26, -1, 9,  -1, 72, -1, -1, -1, -1, -1, 0,  0,  26, 75, 33, 21, 69, 59,
    3,  38, -1, -1, -1, 35, -1, 62, 36, 26, -1, -1, 1,  -1, -1, -1, -1, 0};
/*
 * Block size 1944, rate 5/6
 */
const std::vector<int64_t> B1944_R56 = {
    13, 48, 80, 66, 4,  74, 7,  30, 76, 52, 37, 60, -1, 49, 73, 31,
    74, 73, 23, -1, 1,  0,  -1, -1, 69, 63, 74, 56, 64, 77, 57, 65,
    6,  16, 51, -1, 64, -1, 68, 9,  48, 62, 54, 27, -1, 0,  0,  -1,
    51, 15, 0,  80, 24, 25, 42, 54, 44, 71, 71, 9,  67, 35, -1, 58,
    -1, 29, -1, 53, 0,  -1, 0,  0,  16, 29, 36, 41, 44, 56, 59, 37,
    50, 24, -1, 65, 4,  65, 52, -1, 4,  -1, 73, 52, 1,  -1, -1, 0};

IEEE802Code get(unsigned int rate_idx, unsigned int blocksize) {
  uint64_t Z = 0;
  unsigned int mb = 0;
  unsigned int nb = 0;
  std::vector<int64_t> Hb;

  switch (blocksize) {
  case 648:
    Z = 27;
    switch (rate_idx) {
    case 0:
      mb = 12;
      nb = 24;
      Hb.assign(begin(B648_R12), end(B648_R12));
      break;
    case 1:
      mb = 8;
      nb = 24;
      Hb.assign(begin(B648_R23), end(B648_R23));
      break;
    case 2:
      mb = 6;
      nb = 24;
      Hb.assign(begin(B648_R34), end(B648_R34));
      break;
    case 3:
      mb = 4;
      nb = 24;
      Hb.assign(begin(B648_R56), end(B648_R56));
      break;
    default:
      throw std::runtime_error("Unavailable rate");
    }
    break;
  case 1296:
    Z = 54;
    switch (rate_idx) {
    case 0:
      mb = 12;
      nb = 24;
      Hb.assign(begin(B1296_R12), end(B1296_R12));
      break;
    case 1:
      mb = 8;
      nb = 24;
      Hb.assign(begin(B1296_R23), end(B1296_R23));
      break;
    case 2:
      mb = 6;
      nb = 24;
      Hb.assign(begin(B1296_R34), end(B1296_R34));
      break;
    case 3:
      mb = 4;
      nb = 24;
      Hb.assign(begin(B1296_R56), end(B1296_R56));
      break;
    default:
      throw std::runtime_error("Unavailable rate");
    }
    break;
  case 1944:
    Z = 81;
    switch (rate_idx) {
    case 0:
      mb = 12;
      nb = 24;
      Hb.assign(begin(B1944_R12), end(B1944_R12));
      break;
    case 1:
      mb = 8;
      nb = 24;
      Hb.assign(begin(B1944_R23), end(B1944_R23));
      break;
    case 2:
      mb = 6;
      nb = 24;
      Hb.assign(begin(B1944_R34), end(B1944_R34));
      break;
    case 3:
      mb = 4;
      nb = 24;
      Hb.assign(begin(B1944_R56), end(B1944_R56));
      break;
    default:
      throw std::runtime_error("Unavailable rate");
    }
    break;
  default:
    throw std::runtime_error("Unavilable block size.");
  }
  return IEEE802Code(Hb, Z, mb, nb);
}
} // ieee80211

// fix someday and make part of csrgf2matrix or gf2matrix
std::vector<uint8_t> mat_circshift(std::vector<uint8_t> &A, std::size_t m,
                                   std::size_t n, int shift) {
  // copy matrix values into a valarray of valarrays...
  std::valarray<std::valarray<uint8_t>> columns(std::valarray<uint8_t>(m), n);
  for (std::size_t i = 0; i < m; ++i) {
    for (std::size_t j = 0; j < n; ++j) {
      columns[j][i] = A[i * n + j];
    }
  }
  // circularly shift valarray of columns
  auto new_columns = columns.cshift(-shift);
  // copy out again.
  std::vector<uint8_t> out(m * n);
  for (std::size_t i = 0; i < m; ++i) {
    for (std::size_t j = 0; j < n; ++j) {
      out[i * n + j] = new_columns[j][i];
    }
  }
  return out;
}

LDPCCode expand(IEEE802Code code) {
  // store the ones and zeros in a flat vector for now
  std::size_t m = code.Z * code.mb;
  std::size_t n = code.Z * code.nb;
  std::vector<uint8_t> H(m * n, 0);
  // identity matrix
  std::vector<uint8_t> I(code.Z * code.Z, 0);
  for (std::size_t i = 0; i < code.Z; ++i) {
    I[i * code.Z + i] = 1;
  }
  // zero matrix
  std::vector<uint8_t> ZZ(code.Z * code.Z, 0);
  // iterate though the prototype matrix (row-major)
  for (std::size_t ip = 0; ip < code.mb; ++ip) {
    for (std::size_t jp = 0; jp < code.nb; ++jp) {
      // the circular shift for this sub-matrix
      auto shift = code.Hb[ip * code.nb + jp];
      if (shift >= 0) {
        // find the start row and col indices in the large matrix
        std::size_t row_start = code.Z * ip;
        std::size_t col_start = code.Z * jp;
        // get a shifted identity matrix
        auto P = shift == 0 ? I : mat_circshift(I, code.Z, code.Z, shift);
        // set the correct elements to 1
        for (std::size_t v = 0, i = row_start; i < row_start + code.Z;
             ++i, ++v) {
          for (std::size_t u = 0, j = col_start; j < col_start + code.Z;
               ++j, ++u) {
            H[i * n + j] = P[v * code.Z + u];
          }
        }
      }
    }
  }
  return LDPCCode(H, m, n);
}

} /* namespace yaldpc */
