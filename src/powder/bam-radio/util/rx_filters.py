#!/usr/bin/env python3

from scipy import signal
import matplotlib.pyplot as plt
import numpy as np

# constants
Fs = 46.08e6
os = [320, 160, 96, 64, 48, 40, 32, 24, 16, 8, 4]
numtaps = 961
transition = 60e3

# for window method
atten_dB = 40.0
atten_rel = 10 ** (-atten_dB/10)

# (1) compute filter taps
pm_filters = list()
win_filters = list()
for o in os:
    stop_band = 1/o * Fs/2
    filt = signal.remez(numtaps, [0,  stop_band, stop_band + transition, Fs/2], [1, atten_rel], fs=Fs)
    pm_filters.append(filt)
    win_filt = signal.firwin2(numtaps, [0, stop_band, stop_band + transition, Fs/2],
                              [1, 1, atten_rel, 0], fs=Fs)
    win_filters.append(win_filt)

# (2) plot all filter responses
if True:
    # fig1, ax1 = plt.subplots(3, 3)
    # for filt, ax in zip(pm_filters, list(ax1[0]) + list(ax1[1]) + list(ax1[2])):
    #     freq, response = signal.freqz(filt)
    #     ax.semilogy(0.5 * Fs * freq/np.pi, np.abs(response), "b-")
    #     ax.grid(alpha=0.25)
    #     fig1.suptitle("Equiripple")

    fig2, ax2 = plt.subplots(3, 3)
    for filt, ax in zip(win_filters, list(ax2[0]) + list(ax2[1]) + list(ax2[2])):
        freq, response = signal.freqz(filt)
        ax.semilogy(0.5 * Fs * freq/np.pi, np.abs(response), "b-")
        ax.grid(alpha=0.25)
    fig2.suptitle("Hamming window")

    plt.show()

# (3) output c++ code to paste
print("// This file is auto-generated by util/rx_filters.py. DO NOT EDIT.")
print("std::vector<SubChannel> const &SubChannel::table() {")
print("static std::vector<SubChannel> const table{")
for o, filt in zip(os, win_filters):
    khz = (1/o * Fs) / 1000
    print("// {:2f} kHz".format(khz))
    print("SubChannel{{{:d}, {{".format(o), end="")
    print(",\n".join("{:.100f}".format(f) for f in filt), end="")
    print("}},")
print("};")
print("return table;\n}")
